#+TITLE: Xorns User Manual
:PREAMBLE:
#+AUTHOR: Medardo Antonio Rodriguez
#+EMAIL: med@merchise.org
#+DATE: 2014-2019
#+LANGUAGE: en

#+TEXINFO_DIR_CATEGORY: Emacs
#+TEXINFO_DIR_TITLE: Xorns: (xorns).
#+TEXINFO_DIR_DESC: Merchise extensions for Emacs.
#+SUBTITLE: for version 0.1.9 (0.1.9-8-g3df7dff+1)

#+TEXINFO_DEFFN: t
#+OPTIONS: H:4 num:3 toc:2
#+PROPERTY: header-args :eval never
#+BIND: ox-texinfo+-before-export-hook ox-texinfo+-update-copyright-years
#+BIND: ox-texinfo+-before-export-hook ox-texinfo+-update-version-strings

Xorns provides a way to configure (or use) Emacs in a better way, mostly
according to Merchise's best practices.

#+TEXINFO: @noindent
This manual is for Xorns version 0.1.9 (0.1.9-8-g3df7dff+1).

#+BEGIN_QUOTE
Copyright (C) 2014-2019 Merchise Autrement [~ยบ/~]

You can redistribute this document and/or modify it under the terms of
the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any
later version.

This document is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE@.  See the GNU
General Public License for more details.
#+END_QUOTE
:END:

* Introduction

Xorns is our way of experiencing Emacs -- it automates the configuration of
the Emacs packages commonly used by Merchise members with the intention of
creating a coherent environment, focused on ergonomics, to perform our work
that includes Computer Programming and Documentation Management.

Xorns is currently experimental, contributions are very welcome.

The name "xorns" comes from the metaphor about that "Emacs" is the "GNU's
head" and our framework would be "horns" ;).  The "X" instead the "H" is due
to most Merchise project names start with that letter looking for words in
Nahuatl or sometimes in English replacing "H" by "X".

Xorns configures most packages using ~use-package~ and related tools.  Generic
most important are ~deft~, ~dired~, and ~magit~.

Enjoy Emacs and this package as our first and small gift!

* Installation
** _ :ignore:

Xorns can be installed using Emacs' Package Manager or manually from
its development repository.

** Installing from ELPA

ELPA is "GNU Emacs Lisp Package Archive".

This is a pending task, Xorns is not yet in any ELPA repository, but it will
be available eventually ASAP.  If you haven't used Emacs' Package Manager
before, then it's a good time you familiarize yourself with it by reading the
documentation in the Emacs Info Page.

We already started to use "use-package" and we will automate all
package dependencies management in the future using it.

You can familiarize with Emacs' package manager by reading the documentation
in the Emacs manual, see [[info:emacs#Packages]].  Then add the archives to
~package-archives~:

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (package-initialize)

  (setq package-archives
    '(("gnu" . "http://elpa.gnu.org/packages/")
      ("melpa" . "https://melpa.org/packages/")
      ("org" . "https://orgmode.org/elpa/")))
#+END_SRC

Once you have added your preferred archive, you need to update the
local package list using:

#+BEGIN_EXAMPLE
M-x package-refresh-contents RET
#+END_EXAMPLE

Once "xorns" has been deployed in any ELPA repository, and you have
done that above, you can install it using:

#+BEGIN_EXAMPLE
M-x package-install RET xorns RET
#+END_EXAMPLE

Now see [[*Post-Installation Tasks][*Post-Installation Tasks]].

** Installing from the GIT repository

There are two ways:

*** Using Xorns as an autonomous repository

#+BEGIN_SRC shell-script
  cd
  mv .emacs.d .emacs.d.bak
  git clone --depth 1 https://github.com/merchise/xorns.git .emacs.d
#+END_SRC

Then start Emacs.  Wait for a while at the first startup to install all
dependency packages.  Enjoy!

** Installing Xorns locally as an ELPA package

Xorns depends on many packages (see "default.mk" variable "DEPENDENCIES")
which are available from Melpa and Melpa-Stable.  Install them using ~M-x
package-install RET <package> RET~.  Of course you may also install them
manually from their repository.

Then clone the Xorns repository to your softlib dir:

#+BEGIN_SRC shell-script
  cd <your/softlib/dir>
  git clone https://github.com/merchise/xorns.git
  cd xorns
  make local-install
#+END_SRC

Any dependency you haven't installed from ELPA or at
~/path/to/emacs/softlib/<package>~, then you have to tell ~make~
where to find them.  To do so create the file ~/path/to/xorns/config.mk~
with the following content before running ~make~:

#+BEGIN_SRC makefile
  LOAD_PATH  = -L /path/to/xorns/horns
  LOAD_PATH += -L /path/to/<dependency-1>
  ...
  LOAD_PATH += -L /path/to/<dependency-n>
#+END_SRC

We have a pre-configured  ~init.el~, you can use it or adapt a previous one to
require Xorns

#+BEGIN_SRC emacs-lisp
  (require 'xorns)
#+END_SRC

* Getting Started

This short tutorial describes the most essential features that most
Merchisians use on a daily basis.  It only scratches the surface but
should be enough to get you started.

To be continued ...

* Initialization

** Running Emacs

If Emacs is executed with the option ~--debug-init~ (see ~init-file-debug~
variable) ~custom-file~ it is loaded activating the errors.  In addition,
some debug messages are printed during the initialization process.

* Integration with GPG + pinentry.el for authentication

Check: https://stackoverflow.com/questions/60812866/emacs-gpg-pinentry-el-for-authentication

** Some examples to configure GnuPG files

- =~/.gnupg/gpg-agent.conf=:

#+BEGIN_SRC shell-script
  allow-emacs-pinentry
  allow-loopback-pinentry
  default-cache-ttl 600
  max-cache-ttl 7200
  enable-ssh-support
#+END_SRC

- `~/.gnupg/gpg.conf`:

#+BEGIN_SRC shell-script
  use-agent
#+END_SRC

- Add to `~/.bash_profile`:

#+BEGIN_SRC shell-script
  # GPG related
  export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
  export GPG_TTY=$(tty)
  # gpgconf --launch gpg-agent
#+END_SRC

** Emacs configuration

See =xorns-crypt= module for =pinentry= config in Emacs.  For us was enough to
set variable =epg-pinentry-mode=  to ='loopback=.


* Local User Configuration

In Xorns, local user configuration file (see =custom-file= Emacs variable)
will be stored in the standard directory for user-specific configurations
(XDG_CONFIG_HOME), defaults to =~/.config/xorns=.  If that folder does not
exist on your system, the user home is used =~/.xorns=.

The first version of this file is copied from =horns/templates/user-config=.

Because there are former releases of Xorns using old style =custom-file=, the
first time the new style file is create, old variables are imported from
=~/.emacs.d/custom-${USER}.el= (or =~/.emacs.d/custom.el=).

New style user configuration file use three functions:

- =>>=settings/init=: Configuration code for user-settings.

  This function is called at the very beginning of the startup process.  It
  should only modify setting-variables (those prefixed with '>>=|') when their
  default values are not suitable for your configuration.  See for example
  =>>=|default-font= to configure your system font (=custom-set-faces= is
  overwritten in this version of Xorns).

- =>>=building-blocks/configuration=: Configuration code for building-blocks
  customization.

  This function should only modify variables to customize how building-blocks
  are loaded (those prefixed with '>>=+') when their default values are not
  suitable for your configuration.

- =>>=user-code=: User-code executed after initialization process.

* Display and Buffer Geometry Configuration

For some reason in Manjaro Linux, using *i3* as window-manager (maybe in all
tiling desktops), configure to startup in ~fullscreen maximize~ mode doesn't
work in the initial frame with the standard procedure (see
`initial-frame-alist' variable).

We "patch" this configuration starting Emacs in ~fullboth~ mode, and then
toggle to ~maximize~.

Geometry for the initial-frame is only applied after the initialization
process is finalized. If you want this configuration since the first
beginning, modify one of the X Resources files (for example ~/.Xresources)
adding the next line:

#+BEGIN_SRC shell-script
  emacs.fullscreen: full-both
#+END_SRC

You can rather use ~maximize~ if you don't use a tiling desktop.


* Configure Emacs as a Window Manager

https://wiki.archlinux.org/index.php/EXWM

https://github.com/ch11ng/exwm/wiki

** Install

Make sure you have =emacs= and =xorg-xinit= installed.

From within Emacs: M-x package-install exwm RET.  This is done by Xorns
automatically.

To start Emacs as a Windows manager make sure you create symbolic-links for
 =exwm/*.desktop= files into =/usr/share/xsessions=:

#+BEGIN_SRC shell-script
  sudo ln -f ~/.emacs.d/exwm/*.desktop /usr/share/xsessions/
#+END_SRC

If you are using a Version Control System to maintain your =~/.emacs.d=
directory, =/usr/share/xsessions/= files may become outdated.

NOTE that =user-emacs-directory= could use another location, for example if
the XDG convention is used in Emacs 27 =$XDG_CONFIG_HOME/emacs/=.


See [[https://wiki.archlinux.org/index.php/Desktop_entries][desktop entries]] for more information about =.desktop= files.

The log-out and start a new session choosing one of the "Emacs" entries.


* Issues and Feature Requirements


* _ :ignore:

# Local Variables:
# eval: (require 'org-man     nil t)
# eval: (require 'ox-extra    nil t)
# eval: (require 'ox-texinfo+ nil t)
# eval: (and (featurep 'ox-extra) (ox-extras-activate '(ignore-headlines)))
# indent-tabs-mode: nil
# org-src-preserve-indentation: nil
# End:
