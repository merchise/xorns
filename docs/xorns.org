#+TITLE: Xorns User Manual
* _ :ignore:

Xorns provides a way to configure (or use) Emacs in a better way, mostly
according to Merchise's best practices.


* Introduction

Xorns is our way of experiencing Emacs -- it automates the configuration of
the Emacs packages commonly used by [[https://github.com/merchise#what-is-merchise][Merchise members]] with the intention of
creating a coherent environment, focused on ergonomics, to perform our work
that includes Computer Programming and Documentation Management.

The name "xorns" comes from the metaphor about that "Emacs" is the "GNU's
head" and our framework would be "horns" ;).  The "X" instead the "H" is due
to most Merchise project names start with that letter looking for words in
Nahuatl or sometimes in English replacing first "H" by "X" to imitate the
pronunciation of the "X" in Nahuatl.

Xorns configures most packages using [[https://github.com/jwiegley/use-package][use-package]] and related tools.  For
example: [[help:dired][dired]], [[help:magit][magit]], and many others.

Enjoy Emacs and this package as our first and small gift!


* Installation
** _ :ignore:

To install Xorns, clone its [[https://github.com/merchise/xorns][development repository]] to your Emacs configuration
directory.

#+BEGIN_QUOTE
Xorns is hosted on different GIT services, we only expose the main GitHub one.
#+END_QUOTE

** Cloning the repository

To use Xorns, you can only use a directory for the Emacs configuration, in
which case you should use =~/.emacs.d= or the XDG-compatible
=~/.config/emacs=.

#+BEGIN_SRC shell
  XORNS_TARGET=~/.emacs.d
  [ -d $XORNS_TARGET ] && mv $XORNS_TARGET ${XORNS_TARGET}.bak    # you know
  git clone --depth 1 https://github.com/merchise/xorns.git $XORNS_TARGET
#+END_SRC

#+BEGIN_QUOTE
It is recommended to delete all compiled files (~.elc~) and recompile the
[[file:~/.emacs.d/horns][project folder]] each time you clone a new release.  For this you can use the
[[help:>>=bots/remove-compiled][>>=bots/remove-compiled]] and [[help:>>=bots/byte-recompile][>>=bots/byte-recompile]] commands respectively.
#+END_QUOTE

** Creating a Xorns user configuration folder

After cloning the repository, Xorns is ready to run, but it is advisable
to first create a Xorns user configuration folder:

#+BEGIN_SRC shell
  CONFIG_HOME=${XDG_CONFIG_HOME:~/.config}
  XORNS_CONFIG=$CONFIG_HOME/xorns
  mkdir $XORNS_CONFIG
#+END_SRC

Inside this folder there must be at least two special files:
- =user-config.el=: Xorns local user configuration file.  There is a [[file:~/work/emacs/xorns/horns/templates/user-config][template]]
  to create this file, you must copy the template to the =XORNS_CONFIG=
  directory, and rename it to use its real name, then customize your
  preferences.
- =custom.el=: File used for storing standard Emacs customization information.
  See the Emacs variable [[help:custom-file][custom-file]] for more information.


* Prerequisites

Xorns requires Emacs version > 28.1+ (recommended: 29.1+ with native
compilation enabled).

Install the fonts you will customize.

Recommendations:
- [[https://adobe-fonts.github.io/source-code-pro/][Source Code Pro]]
- [[https://github.com/ryanoasis/nerd-fonts][RobotoMono Nerd Font]], part of [[https://www.nerdfonts.com/][Nerd Fonts]], project that patches developer
  targeted fonts with a high number of icons.

You can also use fallback fonts to ensure that certain Unicode symbols appear
correctly (If you don't do this you may have problems with certain types of
`mode-line`). For example: [[https://fonts.google.com/specimen/Nanum+Gothic][Nanum Gothic]].  There is also a [[https://wfonts.com/][good site]] to search
fonts; and many systems have all these font installable from the package
manager.

There could be packages using [[https://github.com/domtronn/all-the-icons.el][all-the-icons]] and [[https://github.com/rainstormstudio/nerd-icons.el][nerd-icons]].  If any of those
are installed, please execute the helper functions [[help:all-the-icons-install-fonts][all-the-icons-install-fonts]]
and [[help:nerd-icons-install-fonts][nerd-icons-install-fonts]].

- Several commands use operating system programs.  In the [[file:~/work/emacs/xorns/horns/xorns-system.el][xorns-system]] module
  you can see how to configure these options.  For example:
- `grep`: very slow but widely available on most systems.
- rg ([[https://github.com/BurntSushi/ripgrep][ripgrep]]): line-oriented search tool that recursively searches the
  current directory for a regular expression pattern (strongly recommend).
- [[https://github.com/junegunn/fzf][fzf]]: general-purpose command-line fuzzy finder.


** Deprecated old instalation method

In its early versions, you could install Xorns in the Emacs ELPA directory
using =make install=, this possibility is already obsolete and will soon no
longer be able to be used.


* Getting Started

This short tutorial describes the most essential features that most
Merchisians use on a daily basis.  It only scratches the surface but
should be enough to get you started.

To be continued ...

* Initialization

** Running Emacs

If Emacs is executed with the option ~--debug-init~ (see ~init-file-debug~
variable) ~custom-file~ it is loaded activating the errors.  In addition,
some debug messages are printed during the initialization process.


* Configure Emacs as a Window Manager
** _ :ignore:

... work in progress.

** Install

To start Emacs as a Windows manager make sure you create symbolic-links for
all =.desktop= files in the directory [[file:~/work/emacs/xorns/exwm][exwm]] of the xorns project into
=/usr/share/xsessions=:

#+BEGIN_SRC shell
  sudo cp $XORNS_TARGET/exwm/*.desktop /usr/share/xsessions/
#+END_SRC

#+BEGIN_QUOTE
Any time these files are updated in the Xorns repository, a new copy must be
done.
#+END_QUOTE

* Source Code Conventions

We use prefixes for most symbols, next are some conventions:

- '>>=' - for general definitions,
- '>>=!' - for constants,
- '>>=|' - for configuration variables,
- '>>=+' - for building blocks configuration variables,
- ->>-' - for module internals, and
- '>>:' for declarative functions in package configuration options.

Standard modules will use "-" separator in its names (for example
[[file:~/work/emacs/xorns/horns/xorns-config.el][xorns-config.el]]).  Sub-levels are joined with "/" (for example
">>=config/user-folder").

# Local Variables:
# eval: (require 'org-man     nil t)
# eval: (require 'ox-extra    nil t)
# eval: (require 'ox-texinfo+ nil t)
# eval: (and (featurep 'ox-extra) (ox-extras-activate '(ignore-headlines)))
# org-src-preserve-indentation: nil
# End:
